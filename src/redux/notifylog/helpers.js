// BufferNotifyManager merges multiple requests for notifications raised in a short timeframe into a single batched notification

import PushNotification from 'react-native-push-notification';

// ---------------------------------------
// --- notification buffering
// ---------------------------------------

export class BufferNotifyManager {
    constructor(opts) {
        this.duration = opts.duration || 2000;

        // for buffering notifications (i.e. to show one 'batched' notification if we receive many)
        this.bufferNotify = this.bufferNotify.bind(this);
        this.releaseBuffer = this.releaseBuffer.bind(this);
        this.buffered_notifies = [];
        this.buffer_handler = -1;
    }

    bufferNotify(notif) {
        this.buffered_notifies = this.buffered_notifies.concat(notif);

        if (this.buffer_handler >= 0) {
            clearTimeout(this.buffer_handler);
        }

        this.buffer_handler = setTimeout(this.releaseBuffer, this.duration);
    }

    releaseBuffer() {
        // console.log("Notifies: ", this.buffered_notifies);

        // fire off either a single detailed notification, or a batched notify if length > 1
        if (this.buffered_notifies.length == 1) {
            showSingleNotification(this.buffered_notifies[0]);
        }
        else {
            showBatchedNotification(this.buffered_notifies);
        }

        // and clear all this for next time
        this.buffer_handler = -1;
        this.buffered_notifies = [];
    }


    // ---------------------------------------
    // --- actual notification displaying
    // ---------------------------------------
}

// helper methods for formatting notifications

function showBatchedNotification(buffered_notifies) {
    PushNotification.localNotification({
        title: `${buffered_notifies.length} variants have changed`,
        message: `The clinical significance of ${buffered_notifies.length} variants have changed`,
        category: 'batched_notify',
        tag: 'batched_notify',
        userInfo: { type: 'batched_notify' },
        largeIcon: "ic_launcher",
        smallIcon: "ic_stat_brca_notify"
    });
}

function showSingleNotification(notif) {
    PushNotification.localNotification({
        title: notif.title,
        message: notif.body,
        category: 'single_notify',
        tag: 'single_notify',
        userInfo: { variant_id: notif.variant_id, type: 'single_notify' },
        largeIcon: "ic_launcher",
        smallIcon: "ic_stat_brca_notify"
    });
}

export function showNotification(title, message, batched) {
    PushNotification.localNotification({
        /* Android Only Properties */
        /*
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: 'some_tag', // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: "high", // (optional) set notification priority, default: high
        visibility: "private", // (optional) set notification visibility, default: private
        importance: "high", // (optional) set notification importance, default: high
        */

        /* iOS only properties */
        /*
        alertAction: null, // (optional) default: view
        category: null, // (optional) default: null
        userInfo: null, // (optional) default: null (object containing additional notification data)
        */

        /* iOS and Android properties */
        title: title, // (optional)
        message: message, // (required)
        // playSound: false, // (optional) default: true
        // soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        // number: (12).toString(), // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        // actions: '["Show Variant", "Dismiss"]',  // (Android only) See the doc for notification actions to know more
    });
}

export function announceBatchedNotifies(notifies) {
    // fire off either a single detailed notification, or a batched notify if length > 1
    if (notifies.length == 1) {
        showSingleNotification(notifies[0]);
    }
    else if (notifies.length > 0) {
        showBatchedNotification(notifies);
    }
}
